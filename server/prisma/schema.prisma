// ServiceNow MCP Web Application Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects     Project[]
  chatSessions ChatSession[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents    Document[]
  chatSessions ChatSession[]

  @@map("projects")
}

model Document {
  id               String            @id @default(cuid())
  projectId        String
  filename         String
  originalName     String
  contentType      String
  fileSize         Int
  content          String?           // Extracted text content
  chunkCount       Int               @default(0)
  processingStatus ProcessingStatus  @default(UPLOADING)
  errorMessage     String?
  createdAt        DateTime          @default(now())

  // Relations
  project Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chunks  DocumentChunk[]

  @@map("documents")
}

model DocumentChunk {
  id         String   @id @default(cuid())
  documentId String
  content    String
  chunkIndex Int
  embedding  String?  // JSON string of embedding vector
  createdAt  DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_chunks")
}

model ChatSession {
  id               String   @id @default(cuid())
  title            String?
  model            String
  totalTokensUsed  Int      @default(0)
  contextLimit     Int
  projectId        String?  // Optional - can be null for general chats
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  messages Message[]

  @@map("chat_sessions")
}

model Message {
  id         String      @id @default(cuid())
  role       MessageRole
  content    String
  tokenCount Int         @default(0)
  model      String?
  sources    String?     // JSON array of source citations
  createdAt  DateTime    @default(now())

  // Relations
  sessionId      String
  session        ChatSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  toolExecutions ToolExecution[]

  @@map("messages")
}

model ToolExecution {
  id        String               @id @default(cuid())
  toolName  String
  arguments String // JSON string
  result    String? // JSON string
  status    ToolExecutionStatus
  error     String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  // Relations
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("tool_executions")
}

enum Role {
  USER
  ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ToolExecutionStatus {
  QUEUED
  EXECUTING
  COMPLETED
  FAILED
}

enum ProcessingStatus {
  UPLOADING
  PROCESSING
  COMPLETED
  FAILED
}