// ServiceNow MCP Web Application Database Schema - PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String
  avatar            String?
  role              Role      @default(USER)
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  failedLoginAttempts Int     @default(0)
  lockedUntil       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  projects          Project[]
  chatSessions      ChatSession[]
  apiKeys           ApiKey[]
  rateLimitRecords  RateLimitRecord[]

  @@index([email])
  @@map("users")
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  key       String   @unique
  name      String
  lastUsed  DateTime?
  expiresAt DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([key])
  @@index([userId])
  @@map("api_keys")
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  settings    Json?    // Project-specific settings (JSON)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents    Document[]
  chatSessions ChatSession[]

  @@index([userId])
  @@map("projects")
}

model Document {
  id               String            @id @default(cuid())
  projectId        String
  filename         String
  originalName     String
  contentType      String
  fileSize         Int
  content          String?           // Extracted text content
  chunkCount       Int               @default(0)
  processingStatus ProcessingStatus  @default(UPLOADING)
  errorMessage     String?
  metadata         Json?             // Additional metadata (JSON)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  project Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chunks  DocumentChunk[]

  @@index([projectId])
  @@index([processingStatus])
  @@map("documents")
}

model DocumentChunk {
  id         String   @id @default(cuid())
  documentId String
  content    String   @db.Text
  chunkIndex Int
  embedding  Float[]  // Native PostgreSQL array for embeddings
  metadata   Json?    // Chunk-specific metadata
  createdAt  DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@index([documentId])
  @@map("document_chunks")
}

model ChatSession {
  id               String    @id @default(cuid())
  title            String?
  model            String
  totalTokensUsed  Int       @default(0)
  contextLimit     Int
  projectId        String?   // Optional - can be null for general chats
  isActive         Boolean   @default(true)
  metadata         Json?     // Session metadata (JSON)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastMessageAt    DateTime?

  // Relations
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  messages Message[]

  @@index([userId])
  @@index([projectId])
  @@index([lastMessageAt])
  @@map("chat_sessions")
}

model Message {
  id              String      @id @default(cuid())
  role            MessageRole
  content         String      @db.Text
  tokenCount      Int         @default(0)
  model           String?
  sources         Json?       // JSON array of source citations
  metadata        Json?       // Additional metadata
  parentMessageId String?     // For conversation threading
  createdAt       DateTime    @default(now())

  // Relations
  sessionId       String
  session         ChatSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  toolExecutions  ToolExecution[]
  parentMessage   Message?        @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies         Message[]       @relation("MessageReplies")

  @@index([sessionId])
  @@index([createdAt])
  @@map("messages")
}

model ToolExecution {
  id            String               @id @default(cuid())
  toolName      String
  arguments     Json                 // JSON object
  result        Json?                // JSON object
  status        ToolExecutionStatus
  error         String?
  executionTime Int?                 // Execution time in milliseconds
  retryCount    Int                  @default(0)
  metadata      Json?                // Additional execution metadata
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  // Relations
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([status])
  @@index([toolName])
  @@map("tool_executions")
}

model QueuedJob {
  id          String         @id @default(cuid())
  queue       String         // Queue name (e.g., 'tool-execution', 'document-processing')
  payload     Json           // Job payload
  status      JobStatus      @default(PENDING)
  priority    Int            @default(0)
  attempts    Int            @default(0)
  maxAttempts Int            @default(3)
  result      Json?
  error       String?
  processedAt DateTime?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([queue, status])
  @@index([priority])
  @@index([createdAt])
  @@map("queued_jobs")
}

model RateLimitRecord {
  id        String   @id @default(cuid())
  userId    String?
  ip        String?
  endpoint  String
  count     Int      @default(1)
  windowStart DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint, windowStart])
  @@unique([ip, endpoint, windowStart])
  @@index([windowStart])
  @@map("rate_limit_records")
}

model MCPConnection {
  id            String   @id @default(cuid())
  connectionId  String   @unique
  status        ConnectionStatus @default(CONNECTING)
  lastPingAt    DateTime?
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([status])
  @@map("mcp_connections")
}

enum Role {
  USER
  ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

enum ToolExecutionStatus {
  QUEUED
  EXECUTING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
}

enum ProcessingStatus {
  UPLOADING
  PROCESSING
  COMPLETED
  FAILED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ConnectionStatus {
  CONNECTING
  CONNECTED
  DISCONNECTED
  ERROR
}